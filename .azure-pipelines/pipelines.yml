trigger:
  branches:
    include:
      - "headers"
  tags:
    include:
      - "v*"

# PR build config is manually overridden in Azure pipelines UI with different secrets
pr: none

jobs:
  - job: format
    dependsOn: [] # this removes the implicit dependency on previous stage and causes this to run in parallel.
    pool:
      vmImage: "ubuntu-18.04"
    steps:
      - task: Cache@2
        inputs:
          key: "format | ./WORKSPACE | **/*.bzl"
          path: $(Build.StagingDirectory)/repository_cache
        continueOnError: true

      - script: ci/run_envoy_docker.sh 'ci/check_and_fix_format.sh'
        workingDirectory: $(Build.SourcesDirectory)
        env:
          ENVOY_DOCKER_BUILD_DIR: $(Build.StagingDirectory)
          BAZEL_REMOTE_CACHE: grpcs://remotebuildexecution.googleapis.com
          BAZEL_REMOTE_INSTANCE: projects/envoy-ci/instances/default_instance
          GCP_SERVICE_ACCOUNT_KEY: $(GcpServiceAccountKey)
        displayName: "Run check format scripts"

  - job: release
    displayName: "Linux-x64 release"
    dependsOn: ["format"]
    # For master builds, continue even if format fails
    condition: and(not(canceled()), or(succeeded(), ne(variables['Build.Reason'], 'PullRequest')))
    timeoutInMinutes: 360
    pool:
      vmImage: "ubuntu-18.04"
    steps:
      - template: bazel.yml
        parameters:
          ciTarget: bazel.release

  - job: bazel
    displayName: "Linux-x64"
    dependsOn: ["release"]
    # For master builds, continue even if format fails
    condition: and(not(canceled()), or(succeeded(), ne(variables['Build.Reason'], 'PullRequest')))
    strategy:
      maxParallel: 3
      matrix:
        gcc:
          CI_TARGET: "bazel.dev"
        clang_tidy:
          CI_TARGET: "bazel.clang_tidy"
    timeoutInMinutes: 360
    pool:
      vmImage: "ubuntu-18.04"
    steps:
      - template: bazel.yml
        parameters:
          ciTarget: $(CI_TARGET)
